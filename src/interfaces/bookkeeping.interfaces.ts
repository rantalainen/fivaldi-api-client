/// PARAMS INTERFACES ///

export interface IGetVouchersParams {
  /** Fetches vouchers after or on this date (YYYY-MM-DD). */
  startDate: string;
  /** Fetches vouchers before or on this date (YYYY-MM-DD). */
  endDate: string;
  /** Fetches voucher entries having account number greater or same than minAccount. */
  minAccount?: number;
  /** Fetches voucher entries having account number smaller or same than minAccount. */
  maxAccount?: number;
  /** Fetches voucher entries having provided dimension1. */
  dimension1?: string;
  /** Fetches voucher entries having provided dimension2.*/
  dimension2?: string;
  /** Fetches voucher entries having provided dimension3. */
  dimension3?: string;
  /** Fetches voucher entries having provided dimension4. */
  dimension4?: string;
}

export interface IGetVoucherByIdParams {
  /** Fetches a voucher with given voucher number. */
  voucherNumber: string;
}

export interface IGetVoucherTypesParams {
  /** Fetches voucher types with given usage. */
  usage?: string;
}

export interface IGetAccountBalanceParams {
  /** Fetches accounts data for given month (YYYYMM). */
  month: number;
  /** Fetches accounts data having account number greater or same than minAccount. */
  minAccount?: string;
  /** Fetches accounts data having account number smaller or same than minAccount. */
  maxAccount?: string;
}

export interface IGetAttachmentsParams {
  voucherNumber: string;
  voucherType: number;
}

export interface IAddAttachmentParams {
  /** Journal number. */
  journalNo: string;
  /** Voucher type. */
  voucherType: number;
}

/// RESPONSE INTERFACES ///

export interface IFetchVoucherResponse {
  /** Id of voucher type. */
  voucherType: number;
  /** Voucher Type name. */
  voucherTypeName: string;
  /** Fivaldi voucher number. */
  voucherNumber: string;
  /** Date when voucher was issued (YYYY-MM-DD). */
  voucherDate: string;
  /** Voucher due date (YYYY-MM-DD). */
  dueDate: string;
  /** Voucher period id (YYYYMM). */
  accountingPeriod: number;
  /** Fiscal year id. */
  fiscalYearId: string;
  /** Flag for deleted status. */
  isDeleted: boolean;
  voucherEntries: IVoucherEntryResponse[];
}

export interface IVoucherEntryResponse {
  /** Voucher entry number inside voucher. */
  entryNumber: number;
  /** Voucher description. */
  description: string;
  /** Voucher ammount. */
  amount: number;
  /** Voucher balance code. */
  balanceCode: number;
  /** Account number. */
  accountNumber: number;
  /** Account name. */
  accountName: string;
  dimension: {
    dimension1: string;
    dimension1Name: string;
    dimension2: string;
    dimension2Name: string;
    dimension3: string;
    dimension3Name: string;
    dimension4: string;
    dimension4Name: string;
  };
  vat: IVoucherEntryVat;
}

export interface IVoucherEntryVat {
  /** Fivaldi vat code. */
  vatCode: string;
  vatAmount: number;
  vatAccount: string;
  vatAccountName: string;
  vatAccount2: string;
  vatAccount2Name: string;
}

export interface IVatCodeResponse {
  /** Vat id in Fivaldi. */
  vatId: number;
  vatAccount: number;
  vatAccount2: number;
  /** List of vat percentages order descending by start date. */
  vatPercentages: IVatPercentageResponse[];
}

export interface IVatPercentageResponse {
  /** Vat code in Fivaldi. */
  vatPercentageCode: string;
  percentage: number;
  deductionPercentage: number;
  /** Vat percentage start date (YYYY-MM-DD). */
  startDate: string;
}

export interface IVoucherType {
  /** Account type id. */
  id: number;
  /** Account type usage. */
  usage: string;
  /** Account type description. */
  description: string;
}

export interface IFiscalYear {
  /** Fiscal year id. */
  id: number;
  /** Begin date of fiscal year (YYYY-MM-DD). */
  startDate: string;
  /** End date of fiscal year (YYYY-MM-DD). */
  endDate: string;
  fiscalYearStatus: 'OPEN' | 'CLOSED' | 'PERMANENTLY_CLOSED';
}

export interface IAccountBalance {
  /** Account number. */
  account: string;
  balance: number;
  debitSum: number;
  creditSum: number;
}

export interface IVoucherImportResponse {
  /** A voucher number that will be generated by Fivaldi. */
  fivaldiVoucherNumber: number;
}

export interface IVoucherAttachmentResponse {
  searchId: number;
  searchCount: number;
  hasErrors: boolean;
  errorMessage: string;
  /** List of attachment files */
  archiveObjects: IArchiveObjectResponse[];
}

export interface IArchiveObjectResponse {
  objectId: string;
  objectDescription: string;
  sizeBytes: number;
  mimeType: string;
}

/// REQUEST INTERFACES ///

export interface IVoucherImportRequest {
  voucherTypeId: number;
  /** Add original voucher number to the description field if you want to be able to see the original voucher number in Fivaldi bookkeeping. */
  originalVoucherNumber: string;
  /** Date of voucher in YYYY-MM-DD format. */
  voucherDate: string;
  /** Bookkeeping month in YYYYMM format. */
  bookkeepingMonth: number;
  /** Voucher vat type. 'CALCULATED' Fivaldi will not make any calculation. 'AUTO' Fivaldi will calculate vat based on default settings. */
  vatType: string;
  /** A flag that instructs Fivaldi if it should validate sum of voucher entries to be 0. */
  validateEntrySum: boolean;
  voucherEntries: IVoucherEntryRequest[];
}

export interface IVoucherEntryRequest {
  /** Amount of voucher entry. */
  amount: number;
  accountNumber: number;
  balanceCode?: number;
  dimensionValue1?: string;
  dimensionValue2?: string;
  dimensionValue3?: string;
  dimensionValue4?: string;
  description?: string;
  vat?: IVoucherEntryVatRequest;
}

export interface IVoucherEntryVatRequest {
  /** Vat code in Fivaldi. */
  vatCode: string;
  /** Voucher entry vat amount. */
  vatAmount: number;
  account?: string;
  account2?: string;
}
